#ifndef DST_USER_CONSTRUCTIONGENERATORTEMPLATE_h
#define DST_USER_CONSTRUCTIONGENERATORTEMPLATE_h

#include <variant>
#include <vector>
#include <string>

namespace DST::user
{

	/*!	\class ConstructionGeneratorTemplate
	 *
	 *	\brief Generates code for "ConstructionGeneratorTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class ConstructionGeneratorTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			class_name_,
			convert_enum_scope_to_name_,
			convert_enum_to_name_,
			convert_enum_to_name_case_,
			delete_member_,
			enum_,
			enum_scope_,
			enum_scope_enumeration_,
			enum_scope_type_,
			enum_type_,
			enumeration_,
			file_,
			header_guard_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			member_,
			member_class_declaration_,
			member_declaration_,
			member_fields_,
			member_initialization_,
			member_type_,
			namespace_,
			namespace_upper_,
			register_member_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,
			scope_,
			scope_arguments_,
			scope_assignment_,
			scope_field_,
			scope_function_,
			scope_initialize_,


		};


		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,
		};


		static constexpr const char* ConvertEnumToName(::DST::user::ConstructionGeneratorTemplate::Type enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::DST::user::ConstructionGeneratorTemplate::Type::class_name_:
			{
				return "class_name";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::convert_enum_scope_to_name_:
			{
				return "convert_enum_scope_to_name";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::convert_enum_to_name_:
			{
				return "convert_enum_to_name";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::convert_enum_to_name_case_:
			{
				return "convert_enum_to_name_case";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::delete_member_:
			{
				return "delete_member";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::enum_:
			{
				return "enum";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::enum_scope_:
			{
				return "enum_scope";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::enum_scope_enumeration_:
			{
				return "enum_scope_enumeration";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::enum_scope_type_:
			{
				return "enum_scope_type";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::enum_type_:
			{
				return "enum_type";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::enumeration_:
			{
				return "enumeration";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::file_:
			{
				return "file";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::header_guard_:
			{
				return "header_guard";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::left_angle_bracket_:
			{
				return "left_angle_bracket";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::left_bracket_:
			{
				return "left_bracket";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::left_curly_bracket_:
			{
				return "left_curly_bracket";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::member_:
			{
				return "member";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::member_class_declaration_:
			{
				return "member_class_declaration";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::member_declaration_:
			{
				return "member_declaration";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::member_fields_:
			{
				return "member_fields";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::member_initialization_:
			{
				return "member_initialization";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::member_type_:
			{
				return "member_type";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::namespace_:
			{
				return "namespace";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::namespace_upper_:
			{
				return "namespace_upper";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::register_member_:
			{
				return "register_member";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::right_angle_bracket_:
			{
				return "right_angle_bracket";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::right_bracket_:
			{
				return "right_bracket";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::right_curly_bracket_:
			{
				return "right_curly_bracket";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::scope_:
			{
				return "scope";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::scope_arguments_:
			{
				return "scope_arguments";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::scope_assignment_:
			{
				return "scope_assignment";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::scope_field_:
			{
				return "scope_field";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::scope_function_:
			{
				return "scope_function";
			}

			case ::DST::user::ConstructionGeneratorTemplate::Type::scope_initialize_:
			{
				return "scope_initialize";
			}


			}

			return "";
		}



	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::DST::user::ConstructionGeneratorTemplate::Type type = ::DST::user::ConstructionGeneratorTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({ currentValueAsVariableBase, variable });

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}


		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::DST::user::ConstructionGeneratorTemplate::ScopeType scope_type = ::DST::user::ConstructionGeneratorTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(::DST::user::ConstructionGeneratorTemplate::ScopeType scope_type_, bool isReserved_ = false) : VariableBase(), scope_type(scope_type_), isReserved(isReserved_)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::Scope;
			}

			VariableScope(const char* text, ::DST::user::ConstructionGeneratorTemplate::ScopeType scope_type_, bool isReserved_ = false) : VariableBase(text), scope_type(scope_type_), isReserved(isReserved_)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::Scope;
			}

			VariableScope(std::vector<VariableBase*> variable, ::DST::user::ConstructionGeneratorTemplate::ScopeType scope_type_, bool isReserved_ = false) : VariableBase(variable), scope_type(scope_type_), isReserved(isReserved_)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(::DST::user::ConstructionGeneratorTemplate::ScopeType::Upper_, true),
				base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(::DST::user::ConstructionGeneratorTemplate::ScopeType::Lower_, true),
				base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(::DST::user::ConstructionGeneratorTemplate::ScopeType::Snake_, true),
				base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(::DST::user::ConstructionGeneratorTemplate::ScopeType::Slash_, true),
				base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(::DST::user::ConstructionGeneratorTemplate::ScopeType::DoubleColon_, true),
				base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ = new VariableScope(::DST::user::ConstructionGeneratorTemplate::ScopeType::Default_, true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ = new VariableScope(::DST::user::ConstructionGeneratorTemplate::ScopeType::Variable_Field_, true);
			VariableBase* variable_field_separator_ = new VariableScope("\n", ::DST::user::ConstructionGeneratorTemplate::ScopeType::Variable_Field_Separator_, true);

			// Ctor
			VariableScopes() : VariableBase() {}

			VariableScopes(const char* text) : VariableBase(text) {}

			VariableScopes(const std::string& text) : VariableBase(text) {}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables) {}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:

		struct Variable_class_name_ : public VariableScopes
		{

			static constexpr auto name = "class_name_";



			Variable_class_name_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::class_name_;
			}

			virtual ~Variable_class_name_() override = default;

			Variable_class_name_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::class_name_;

			}



			Variable_class_name_& operator=(const Variable_class_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_convert_enum_scope_to_name_ : public VariableScopes
		{

			static constexpr auto name = "convert_enum_scope_to_name_";



			Variable_convert_enum_scope_to_name_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::convert_enum_scope_to_name_;
			}

			virtual ~Variable_convert_enum_scope_to_name_() override = default;

			Variable_convert_enum_scope_to_name_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::convert_enum_scope_to_name_;

			}



			Variable_convert_enum_scope_to_name_& operator=(const Variable_convert_enum_scope_to_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_convert_enum_to_name_ : public VariableScopes
		{

			static constexpr auto name = "convert_enum_to_name_";



			Variable_convert_enum_to_name_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::convert_enum_to_name_;
			}

			virtual ~Variable_convert_enum_to_name_() override = default;

			Variable_convert_enum_to_name_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::convert_enum_to_name_;

			}



			Variable_convert_enum_to_name_& operator=(const Variable_convert_enum_to_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_convert_enum_to_name_case_ : public VariableScopes
		{

			static constexpr auto name = "convert_enum_to_name_case_";



			Variable_convert_enum_to_name_case_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::convert_enum_to_name_case_;
			}

			virtual ~Variable_convert_enum_to_name_case_() override = default;

			Variable_convert_enum_to_name_case_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::convert_enum_to_name_case_;

			}



			Variable_convert_enum_to_name_case_& operator=(const Variable_convert_enum_to_name_case_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_delete_member_ : public VariableScopes
		{

			static constexpr auto name = "delete_member_";



			Variable_delete_member_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::delete_member_;
			}

			virtual ~Variable_delete_member_() override = default;

			Variable_delete_member_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::delete_member_;

			}



			Variable_delete_member_& operator=(const Variable_delete_member_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_enum_ : public VariableScopes
		{

			static constexpr auto name = "enum_";



			Variable_enum_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enum_;
			}

			virtual ~Variable_enum_() override = default;

			Variable_enum_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enum_;

			}



			Variable_enum_& operator=(const Variable_enum_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_enum_scope_ : public VariableScopes
		{

			static constexpr auto name = "enum_scope_";



			Variable_enum_scope_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enum_scope_;
			}

			virtual ~Variable_enum_scope_() override = default;

			Variable_enum_scope_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enum_scope_;

			}



			Variable_enum_scope_& operator=(const Variable_enum_scope_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_enum_scope_enumeration_ : public VariableScopes
		{

			static constexpr auto name = "enum_scope_enumeration_";



			Variable_enum_scope_enumeration_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enum_scope_enumeration_;
			}

			virtual ~Variable_enum_scope_enumeration_() override = default;

			Variable_enum_scope_enumeration_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enum_scope_enumeration_;

			}



			Variable_enum_scope_enumeration_& operator=(const Variable_enum_scope_enumeration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_enum_scope_type_ : public VariableScopes
		{

			static constexpr auto name = "enum_scope_type_";



			Variable_enum_scope_type_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enum_scope_type_;
			}

			virtual ~Variable_enum_scope_type_() override = default;

			Variable_enum_scope_type_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enum_scope_type_;

			}



			Variable_enum_scope_type_& operator=(const Variable_enum_scope_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_enum_type_ : public VariableScopes
		{

			static constexpr auto name = "enum_type_";



			Variable_enum_type_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enum_type_;
			}

			virtual ~Variable_enum_type_() override = default;

			Variable_enum_type_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enum_type_;

			}



			Variable_enum_type_& operator=(const Variable_enum_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_enumeration_ : public VariableScopes
		{

			static constexpr auto name = "enumeration_";



			Variable_enumeration_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enumeration_;
			}

			virtual ~Variable_enumeration_() override = default;

			Variable_enumeration_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::enumeration_;

			}



			Variable_enumeration_& operator=(const Variable_enumeration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_file_ : public VariableScopes
		{

			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");


			Variable_file_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("#ifndef "), GenerateVariable(constructiongeneratortemplate_->header_guard_->This()), GenerateVariable("\r\n#define "), GenerateVariable(constructiongeneratortemplate_->header_guard_->This()), GenerateVariable("\r\n\r\n#include <variant>\r\n#include <vector>\r\n#include <string>\r\n\r\nnamespace "), GenerateVariable(constructiongeneratortemplate_->namespace_->This()), GenerateVariable("\r\n"), GenerateVariable("{"), GenerateVariable("\r\n\r\n\t/*!\t"), GenerateVariable("\\"), GenerateVariable("class "), GenerateVariable(constructiongeneratortemplate_->class_name_->This()), GenerateVariable("\r\n\t *\r\n\t *\t"), GenerateVariable("\\"), GenerateVariable("brief Generates code for \""), GenerateVariable(constructiongeneratortemplate_->class_name_->This()), GenerateVariable("\"\r\n\t *\r\n\t *\t"), GenerateVariable("\\"), GenerateVariable("details This is generated by DST"), GenerateVariable("."), GenerateVariable("\r\n\t *\tFor more information visit: https://github"), GenerateVariable("."), GenerateVariable("com/Deruago/DeamerStringTemplate\r\n\t */\r\n\tclass "), GenerateVariable(constructiongeneratortemplate_->class_name_->This()), GenerateVariable("\r\n\t"), GenerateVariable("{"), GenerateVariable("\r\n\tpublic:\r\n\t\t"), GenerateVariable(constructiongeneratortemplate_->enum_->This()), GenerateVariable("\r\n\r\n\t\t"), GenerateVariable(constructiongeneratortemplate_->enum_scope_->This()), GenerateVariable("\r\n\r\n\t\t"), GenerateVariable(constructiongeneratortemplate_->convert_enum_to_name_->This()), GenerateVariable("\r\n\r\n\t\t"), GenerateVariable(constructiongeneratortemplate_->convert_enum_scope_to_name_->This()), GenerateVariable("\r\n\tpublic:\r\n\t\tstruct VariableBase\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t// The value is either a string\r\n\t\t\t// or a vector of variables"), GenerateVariable("."), GenerateVariable("\r\n\t\t\tstd::variant<std::string, std::vector<VariableBase*>> value;\r\n\t\t\tbool isString = true;\r\n\r\n\t\t\t"), GenerateVariable(constructiongeneratortemplate_->enum_type_->This()), GenerateVariable(" type = "), GenerateVariable(constructiongeneratortemplate_->enum_type_->This()), GenerateVariable("::Unknown;\r\n\r\n\t\t\tVariableBase() : VariableBase(std::vector<VariableBase*>())\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tvirtual ~VariableBase() = default;\r\n\r\n\t\t\tVariableBase(const char* text)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tisString = true;\r\n\t\t\t\tvalue = text;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase(const std::string& text)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tisString = true;\r\n\t\t\t\tvalue = text;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase(std::vector<VariableBase*> variables)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tisString = false;\r\n\t\t\t\tvalue = variables;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase* This()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn this;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tvirtual std::string GetValue()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tif (isString)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\treturn std::get<std::string>(value);\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\telse\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tstd::string output;\r\n\t\t\t\t\tauto& variables = std::get<std::vector<VariableBase*>>(value);\r\n\t\t\t\t\tfor (auto* variable : variables)\r\n\t\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\t\toutput += variable->GetValue();\r\n\t\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t\treturn output;\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tstd::string GetName()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn ConvertEnumToName(type);\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase& operator=(const std::string& variable)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn Set(variable);\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase& operator=(VariableBase* variable)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn Set(variable);\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase& operator+=(VariableBase* variable)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn Add(variable);\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase& operator+=(const std::string& variable)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn Add(variable);\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase& Set(const std::string& variable)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tvalue = variable;\r\n\t\t\t\tisString = true;\r\n\r\n\t\t\t\treturn *this;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase& Set(VariableBase* variable)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tif (variable == this)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\treturn *this;\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\t\tvalue = variable->value;\r\n\t\t\t\tisString = variable->isString;\r\n\r\n\t\t\t\treturn *this;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase& Add(const std::string& variable)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tif (isString)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tauto& text = std::get<std::string>(value);\r\n\t\t\t\t\ttext += variable;\r\n\t\t\t\t\tvalue = text;\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\telse\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tauto& vector = std::get<std::vector<VariableBase*>>(value);\r\n\t\t\t\t\tvector"), GenerateVariable("."), GenerateVariable("push_back(new VariableBase(variable));\r\n\t\t\t\t\tvalue = vector;\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\t\treturn *this;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase& Add(VariableBase* variable)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tif (variable == this)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\treturn *this;\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\t\tif (isString)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\t// convert current -> variablebase\r\n\t\t\t\t\t// then create a vector"), GenerateVariable("."), GenerateVariable("\r\n\t\t\t\t\tauto& currentValue = std::get<std::string>(value);\r\n\t\t\t\t\tauto* currentValueAsVariableBase = new VariableBase(currentValue);\r\n\t\t\t\t\tvalue = std::vector<VariableBase*>("), GenerateVariable("{"), GenerateVariable(" currentValueAsVariableBase, variable "), GenerateVariable("}"), GenerateVariable(");\r\n\r\n\t\t\t\t\tisString = false;\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\telse\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tauto& vector = std::get<std::vector<VariableBase*>>(value);\r\n\t\t\t\t\tvector"), GenerateVariable("."), GenerateVariable("push_back(variable);\r\n\t\t\t\t\tvalue = vector;\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\t\treturn *this;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tvoid Clear()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tif (isString)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tvalue = \"\";\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\telse\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tvalue = std::vector<VariableBase*>();\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tvoid* operator new(size_t size)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tvoid* newVariable = ::operator new(size);\r\n\t\t\t\tvariables_to_delete"), GenerateVariable("."), GenerateVariable("emplace_back(static_cast<VariableBase*>(newVariable));\r\n\r\n\t\t\t\treturn newVariable;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t"), GenerateVariable("}"), GenerateVariable(";\r\n\r\n\t\tstatic VariableBase* GenerateVariable(VariableBase* variable)\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\treturn variable;\r\n\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\r\n\t\tstatic VariableBase* GenerateVariable(const std::string& variable)\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\treturn new VariableBase(variable);\r\n\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\tstruct VariableScope : public VariableBase\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t"), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable(" scope_type = "), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable("::Unknown;\r\n\t\t\tbool isReserved = false;\r\n\r\n\t\t\tVariableScope("), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable(" scope_type_, bool isReserved_ = false) : VariableBase(), scope_type(scope_type_), isReserved(isReserved_)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\ttype = "), GenerateVariable(constructiongeneratortemplate_->enum_type_->This()), GenerateVariable("::Scope;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableScope(const char* text, "), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable(" scope_type_, bool isReserved_ = false) : VariableBase(text), scope_type(scope_type_), isReserved(isReserved_)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\ttype = "), GenerateVariable(constructiongeneratortemplate_->enum_type_->This()), GenerateVariable("::Scope;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableScope(std::vector<VariableBase*> variable, "), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable(" scope_type_, bool isReserved_ = false) : VariableBase(variable), scope_type(scope_type_), isReserved(isReserved_)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\ttype = "), GenerateVariable(constructiongeneratortemplate_->enum_type_->This()), GenerateVariable("::Scope;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t"), GenerateVariable("}"), GenerateVariable(";\r\n\t\t\r\n\t\tstruct Variable_ReservedScope_Upper : public VariableScope\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\tVariableBase* base;\r\n\t\t\tVariable_ReservedScope_Upper(VariableBase* base_)\r\n\t\t\t: VariableScope("), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable("::Upper_, true),\r\n\t\t\t  base(base_)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\r\n\t\t\tvirtual std::string GetValue() override\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tstd::string upperVariant;\r\n\t\t\t\tstd::string currentValue = base->GetValue();\r\n\r\n\t\t\t\tfor (const auto character : currentValue)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tupperVariant += std::toupper(character);\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\t\treturn upperVariant;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t"), GenerateVariable("}"), GenerateVariable(";\r\n\t\t\r\n\t\tstruct Variable_ReservedScope_Lower : public VariableScope\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\tVariableBase* base;\r\n\t\t\tVariable_ReservedScope_Lower(VariableBase* base_)\r\n\t\t\t: VariableScope("), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable("::Lower_, true),\r\n\t\t\t  base(base_)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\r\n\t\t\tvirtual std::string GetValue() override\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tstd::string lowerVariant;\r\n\t\t\t\tstd::string currentValue = base->GetValue();\r\n\r\n\t\t\t\tfor (const auto character : currentValue)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tlowerVariant += std::tolower(character);\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\t\treturn lowerVariant;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t"), GenerateVariable("}"), GenerateVariable(";\r\n\t\t\r\n\t\tstruct Variable_ReservedScope_Snake : public VariableScope\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\tVariableBase* base;\r\n\t\t\tVariable_ReservedScope_Snake(VariableBase* base_)\r\n\t\t\t: VariableScope("), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable("::Snake_, true),\r\n\t\t\t  base(base_)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\r\n\t\t\tvirtual std::string GetValue() override\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tstd::string snakeVariant;\r\n\t\t\t\tstd::string currentValue = base->GetValue();\r\n\t\t\t\t\r\n\t\t\t\tbool lastWasNonAlpha = true;\r\n\t\t\t\tfor (const auto character : currentValue)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tif (std::isalpha(character))\r\n\t\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\t\tsnakeVariant += character;\r\n\t\t\t\t\t\tlastWasNonAlpha = false;\r\n\t\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t\telse\r\n\t\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\t\tif (lastWasNonAlpha)\r\n\t\t\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsnakeVariant += '_';\r\n\t\t\t\t\t\tlastWasNonAlpha = true;\r\n\t\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t\r\n\t\t\t\t// If it contains text\r\n\t\t\t\t// remove the tail\r\n\t\t\t\tif (!snakeVariant"), GenerateVariable("."), GenerateVariable("empty() && lastWasNonAlpha)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tsnakeVariant"), GenerateVariable("."), GenerateVariable("pop_back();\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\t\treturn snakeVariant;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t"), GenerateVariable("}"), GenerateVariable(";\r\n\t\t\r\n\t\tstruct Variable_ReservedScope_Slash : public VariableScope\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\tVariableBase* base;\r\n\t\t\tVariable_ReservedScope_Slash(VariableBase* base_)\r\n\t\t\t: VariableScope("), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable("::Slash_, true),\r\n\t\t\t  base(base_)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\r\n\t\t\tvirtual std::string GetValue() override\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tstd::string slashVariant;\r\n\t\t\t\tstd::string currentValue = base->GetValue();\r\n\t\t\t\t\r\n\t\t\t\tbool lastWasNonAlpha = true;\r\n\t\t\t\tfor (const auto character : currentValue)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tif (std::isalpha(character))\r\n\t\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\t\tslashVariant += character;\r\n\t\t\t\t\t\tlastWasNonAlpha = false;\r\n\t\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t\telse\r\n\t\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\t\tif (lastWasNonAlpha)\r\n\t\t\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tslashVariant += '/';\r\n\t\t\t\t\t\tlastWasNonAlpha = true;\r\n\t\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t\r\n\t\t\t\t// If it contains text\r\n\t\t\t\t// remove the tail\r\n\t\t\t\tif (!slashVariant"), GenerateVariable("."), GenerateVariable("empty() && lastWasNonAlpha)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tslashVariant"), GenerateVariable("."), GenerateVariable("pop_back();\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\t\treturn slashVariant;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t"), GenerateVariable("}"), GenerateVariable(";\r\n\t\t\r\n\t\tstruct Variable_ReservedScope_DoubleColon : public VariableScope\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\tVariableBase* base;\r\n\t\t\tVariable_ReservedScope_DoubleColon(VariableBase* base_)\r\n\t\t\t: VariableScope("), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable("::DoubleColon_, true),\r\n\t\t\t  base(base_)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\r\n\t\t\tvirtual std::string GetValue() override\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tstd::string doubleColonVariant;\r\n\t\t\t\tstd::string currentValue = base->GetValue();\r\n\t\t\t\t\r\n\t\t\t\tbool lastWasNonAlpha = true;\r\n\t\t\t\tfor (const auto character : currentValue)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tif (std::isalpha(character))\r\n\t\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\t\tdoubleColonVariant += character;\r\n\t\t\t\t\t\tlastWasNonAlpha = false;\r\n\t\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t\telse\r\n\t\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\t\tif (lastWasNonAlpha)\r\n\t\t\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdoubleColonVariant += \"::\";\r\n\t\t\t\t\t\tlastWasNonAlpha = true;\r\n\t\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\t\t\r\n\t\t\t\t// If it contains text\r\n\t\t\t\t// remove the tail\r\n\t\t\t\tif (!doubleColonVariant"), GenerateVariable("."), GenerateVariable("empty() && lastWasNonAlpha)\r\n\t\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t\tdoubleColonVariant"), GenerateVariable("."), GenerateVariable("pop_back();\r\n\t\t\t\t\tdoubleColonVariant"), GenerateVariable("."), GenerateVariable("pop_back();\r\n\t\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\t\treturn doubleColonVariant;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t"), GenerateVariable("}"), GenerateVariable(";\r\n\r\n\t\tstruct VariableScopes : public VariableBase\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t// Default scopes\r\n\t\t\tVariableBase* default_ = new VariableScope("), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable("::Default_, true);\r\n\t\t\tVariableBase* upper_ = new Variable_ReservedScope_Upper(this);\r\n\t\t\tVariableBase* lower_ = new Variable_ReservedScope_Lower(this);\r\n\t\t\t\r\n\t\t\tVariableBase* snake_ = new Variable_ReservedScope_Snake(this);\r\n\t\t\tVariableBase* slash_ = new Variable_ReservedScope_Slash(this);\r\n\t\t\tVariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);\r\n\t\t\t\r\n\t\t\tVariableBase* variable_field_ = new VariableScope("), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable("::Variable_Field_, true);\r\n\t\t\tVariableBase* variable_field_separator_ = new VariableScope(\""), GenerateVariable("\\"), GenerateVariable("n\", "), GenerateVariable(constructiongeneratortemplate_->enum_scope_type_->This()), GenerateVariable("::Variable_Field_Separator_, true);\r\n\r\n\t\t\t// Ctor\r\n\t\t\tVariableScopes() : VariableBase() "), GenerateVariable("{"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableScopes(const char* text) : VariableBase(text) "), GenerateVariable("{"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableScopes(const std::string& text) : VariableBase(text) "), GenerateVariable("{"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables) "), GenerateVariable("{"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\t// Dtor\r\n\t\t\tvirtual ~VariableScopes() override = default;\r\n\r\n\t\t\t// Calls\r\n\t\t\tVariableBase* Default()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn default_;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t\tVariableBase* Upper()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn upper_;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase* Lower()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn lower_;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase* Underscore()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn snake_;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase* Snake()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn snake_;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase* Slash()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn slash_;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase* DoubleColon()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn double_colon_;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase* Variable_Field()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn variable_field_;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tVariableBase* Variable_Field_Separator()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\treturn variable_field_separator_;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tvoid ExpandVariableField()\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\t// currentvalue + separator\r\n\t\t\t\tconst auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();\r\n\t\t\t\t*Variable_Field() += currentValue;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\t\t"), GenerateVariable("}"), GenerateVariable(";\r\n\r\n\tpublic:\r\n\t\t"), GenerateVariable(constructiongeneratortemplate_->member_class_declaration_->Variable_Field()), GenerateVariable("\r\n\r\n\tpublic:\r\n\t\tinline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();\r\n\r\n\tpublic:\r\n\t\tstd::vector<VariableBase*> variables_;\r\n\r\n\tpublic:\r\n\t\t// Members that one can directly access"), GenerateVariable("."), GenerateVariable("\r\n\t\t// e"), GenerateVariable("."), GenerateVariable("g"), GenerateVariable("."), GenerateVariable(" "), GenerateVariable(constructiongeneratortemplate_->class_name_->This()), GenerateVariable("."), GenerateVariable("member = \"auto-generated\";\r\n\t\t"), GenerateVariable(constructiongeneratortemplate_->member_declaration_->Variable_Field()), GenerateVariable("\r\n\r\n\tpublic:\r\n\t\t"), GenerateVariable(constructiongeneratortemplate_->class_name_->This()), GenerateVariable("()\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t"), GenerateVariable(constructiongeneratortemplate_->member_initialization_->Variable_Field()), GenerateVariable("\r\n\r\n\t\t\t"), GenerateVariable(constructiongeneratortemplate_->register_member_->Variable_Field()), GenerateVariable("\r\n\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\tvirtual ~"), GenerateVariable(constructiongeneratortemplate_->class_name_->This()), GenerateVariable("()\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\tfor(auto* variable : variables_to_delete)\r\n\t\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\t\tdelete variable;\r\n\t\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t\tvariables_to_delete"), GenerateVariable("."), GenerateVariable("clear();\r\n\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\tpublic:\r\n\t\t// Default DST functions\r\n\r\n\t\t/*!\t"), GenerateVariable("\\"), GenerateVariable("fn GetOutput\r\n\t\t *\r\n\t\t *\t"), GenerateVariable("\\"), GenerateVariable("brief returns the output with the given the current state"), GenerateVariable("."), GenerateVariable("\r\n\t\t */\r\n\t\tstd::string GetOutput()\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\treturn file_->Content()->GetValue();\r\n\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\t\t/*!\t"), GenerateVariable("\\"), GenerateVariable("fn GetVariables\r\n\t\t *\r\n\t\t *\t"), GenerateVariable("\\"), GenerateVariable("brief Returns all top level variables known in this template"), GenerateVariable("."), GenerateVariable("\r\n\t\t */\r\n\t\tstd::vector<VariableBase*> GetVariables()\r\n\t\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\t\treturn variables_;\r\n\t\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\tpublic:\r\n\t"), GenerateVariable("}"), GenerateVariable(";\r\n"), GenerateVariable("}"), GenerateVariable("\r\n\r\n#endif // "), GenerateVariable(constructiongeneratortemplate_->header_guard_->This()) }));
				Content_->type = ::DST::user::ConstructionGeneratorTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("Template") }));
				Class_postfix_->type = ::DST::user::ConstructionGeneratorTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("h") }));
				Extension_->type = ::DST::user::ConstructionGeneratorTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("ConstructionGenerator") }));
				File_name_->type = ::DST::user::ConstructionGeneratorTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("DST::user") }));
				Namespace_->type = ::DST::user::ConstructionGeneratorTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("C++") }));
				Target_language_->type = ::DST::user::ConstructionGeneratorTemplate::Type::Scope;


			}


			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}


			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;


				return *this;
			}

		};

		struct Variable_header_guard_ : public VariableScopes
		{

			static constexpr auto name = "header_guard_";



			Variable_header_guard_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::header_guard_;
			}

			virtual ~Variable_header_guard_() override = default;

			Variable_header_guard_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::header_guard_;

			}



			Variable_header_guard_& operator=(const Variable_header_guard_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{

			static constexpr auto name = "left_angle_bracket_";



			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::left_angle_bracket_;

			}



			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_left_bracket_ : public VariableScopes
		{

			static constexpr auto name = "left_bracket_";



			Variable_left_bracket_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::left_bracket_;

			}



			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{

			static constexpr auto name = "left_curly_bracket_";



			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::left_curly_bracket_;

			}



			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_member_ : public VariableScopes
		{

			static constexpr auto name = "member_";



			Variable_member_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_;
			}

			virtual ~Variable_member_() override = default;

			Variable_member_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_;

			}



			Variable_member_& operator=(const Variable_member_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_member_class_declaration_ : public VariableScopes
		{

			static constexpr auto name = "member_class_declaration_";



			Variable_member_class_declaration_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_class_declaration_;
			}

			virtual ~Variable_member_class_declaration_() override = default;

			Variable_member_class_declaration_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_class_declaration_;

			}



			Variable_member_class_declaration_& operator=(const Variable_member_class_declaration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_member_declaration_ : public VariableScopes
		{

			static constexpr auto name = "member_declaration_";



			Variable_member_declaration_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_declaration_;
			}

			virtual ~Variable_member_declaration_() override = default;

			Variable_member_declaration_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_declaration_;

			}



			Variable_member_declaration_& operator=(const Variable_member_declaration_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_member_fields_ : public VariableScopes
		{

			static constexpr auto name = "member_fields_";



			Variable_member_fields_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_fields_;
			}

			virtual ~Variable_member_fields_() override = default;

			Variable_member_fields_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_fields_;

			}



			Variable_member_fields_& operator=(const Variable_member_fields_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_member_initialization_ : public VariableScopes
		{

			static constexpr auto name = "member_initialization_";



			Variable_member_initialization_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_initialization_;
			}

			virtual ~Variable_member_initialization_() override = default;

			Variable_member_initialization_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_initialization_;

			}



			Variable_member_initialization_& operator=(const Variable_member_initialization_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_member_type_ : public VariableScopes
		{

			static constexpr auto name = "member_type_";



			Variable_member_type_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_type_;
			}

			virtual ~Variable_member_type_() override = default;

			Variable_member_type_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::member_type_;

			}



			Variable_member_type_& operator=(const Variable_member_type_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_namespace_ : public VariableScopes
		{

			static constexpr auto name = "namespace_";



			Variable_namespace_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::namespace_;
			}

			virtual ~Variable_namespace_() override = default;

			Variable_namespace_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::namespace_;

			}



			Variable_namespace_& operator=(const Variable_namespace_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_namespace_upper_ : public VariableScopes
		{

			static constexpr auto name = "namespace_upper_";



			Variable_namespace_upper_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::namespace_upper_;
			}

			virtual ~Variable_namespace_upper_() override = default;

			Variable_namespace_upper_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::namespace_upper_;

			}



			Variable_namespace_upper_& operator=(const Variable_namespace_upper_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_register_member_ : public VariableScopes
		{

			static constexpr auto name = "register_member_";



			Variable_register_member_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::register_member_;
			}

			virtual ~Variable_register_member_() override = default;

			Variable_register_member_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::register_member_;

			}



			Variable_register_member_& operator=(const Variable_register_member_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{

			static constexpr auto name = "right_angle_bracket_";



			Variable_right_angle_bracket_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::right_angle_bracket_;

			}



			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_right_bracket_ : public VariableScopes
		{

			static constexpr auto name = "right_bracket_";



			Variable_right_bracket_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::right_bracket_;

			}



			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{

			static constexpr auto name = "right_curly_bracket_";



			Variable_right_curly_bracket_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::right_curly_bracket_;

			}



			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_scope_ : public VariableScopes
		{

			static constexpr auto name = "scope_";



			Variable_scope_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_;
			}

			virtual ~Variable_scope_() override = default;

			Variable_scope_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_;

			}



			Variable_scope_& operator=(const Variable_scope_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_scope_arguments_ : public VariableScopes
		{

			static constexpr auto name = "scope_arguments_";



			Variable_scope_arguments_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_arguments_;
			}

			virtual ~Variable_scope_arguments_() override = default;

			Variable_scope_arguments_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_arguments_;

			}



			Variable_scope_arguments_& operator=(const Variable_scope_arguments_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_scope_assignment_ : public VariableScopes
		{

			static constexpr auto name = "scope_assignment_";



			Variable_scope_assignment_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_assignment_;
			}

			virtual ~Variable_scope_assignment_() override = default;

			Variable_scope_assignment_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_assignment_;

			}



			Variable_scope_assignment_& operator=(const Variable_scope_assignment_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_scope_field_ : public VariableScopes
		{

			static constexpr auto name = "scope_field_";



			Variable_scope_field_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_field_;
			}

			virtual ~Variable_scope_field_() override = default;

			Variable_scope_field_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_field_;

			}



			Variable_scope_field_& operator=(const Variable_scope_field_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_scope_function_ : public VariableScopes
		{

			static constexpr auto name = "scope_function_";



			Variable_scope_function_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_function_;
			}

			virtual ~Variable_scope_function_() override = default;

			Variable_scope_function_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_function_;

			}



			Variable_scope_function_& operator=(const Variable_scope_function_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_scope_initialize_ : public VariableScopes
		{

			static constexpr auto name = "scope_initialize_";



			Variable_scope_initialize_() : VariableScopes()
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_initialize_;
			}

			virtual ~Variable_scope_initialize_() override = default;

			Variable_scope_initialize_(ConstructionGeneratorTemplate* constructiongeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DST::user::ConstructionGeneratorTemplate::Type::scope_initialize_;

			}



			Variable_scope_initialize_& operator=(const Variable_scope_initialize_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};


	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. ConstructionGeneratorTemplate.member = "auto-generated";
		Variable_class_name_* class_name_ = new Variable_class_name_();
		Variable_convert_enum_scope_to_name_* convert_enum_scope_to_name_ = new Variable_convert_enum_scope_to_name_();
		Variable_convert_enum_to_name_* convert_enum_to_name_ = new Variable_convert_enum_to_name_();
		Variable_convert_enum_to_name_case_* convert_enum_to_name_case_ = new Variable_convert_enum_to_name_case_();
		Variable_delete_member_* delete_member_ = new Variable_delete_member_();
		Variable_enum_* enum_ = new Variable_enum_();
		Variable_enum_scope_* enum_scope_ = new Variable_enum_scope_();
		Variable_enum_scope_enumeration_* enum_scope_enumeration_ = new Variable_enum_scope_enumeration_();
		Variable_enum_scope_type_* enum_scope_type_ = new Variable_enum_scope_type_();
		Variable_enum_type_* enum_type_ = new Variable_enum_type_();
		Variable_enumeration_* enumeration_ = new Variable_enumeration_();
		Variable_file_* file_ = new Variable_file_();
		Variable_header_guard_* header_guard_ = new Variable_header_guard_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_member_* member_ = new Variable_member_();
		Variable_member_class_declaration_* member_class_declaration_ = new Variable_member_class_declaration_();
		Variable_member_declaration_* member_declaration_ = new Variable_member_declaration_();
		Variable_member_fields_* member_fields_ = new Variable_member_fields_();
		Variable_member_initialization_* member_initialization_ = new Variable_member_initialization_();
		Variable_member_type_* member_type_ = new Variable_member_type_();
		Variable_namespace_* namespace_ = new Variable_namespace_();
		Variable_namespace_upper_* namespace_upper_ = new Variable_namespace_upper_();
		Variable_register_member_* register_member_ = new Variable_register_member_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();
		Variable_scope_* scope_ = new Variable_scope_();
		Variable_scope_arguments_* scope_arguments_ = new Variable_scope_arguments_();
		Variable_scope_assignment_* scope_assignment_ = new Variable_scope_assignment_();
		Variable_scope_field_* scope_field_ = new Variable_scope_field_();
		Variable_scope_function_* scope_function_ = new Variable_scope_function_();
		Variable_scope_initialize_* scope_initialize_ = new Variable_scope_initialize_();


	public:
		ConstructionGeneratorTemplate()
		{
			*class_name_ = Variable_class_name_(this, std::vector<VariableBase*>({ GenerateVariable(file_->File_name()), GenerateVariable(file_->Class_postfix()) }));
			*convert_enum_scope_to_name_ = Variable_convert_enum_scope_to_name_(this, std::vector<VariableBase*>({  }));
			*convert_enum_to_name_ = Variable_convert_enum_to_name_(this, std::vector<VariableBase*>({ GenerateVariable("static constexpr const char* ConvertEnumToName("), GenerateVariable(enum_type_->This()), GenerateVariable(" enumerationValue)\r\n"), GenerateVariable("{"), GenerateVariable("\r\n\tswitch(enumerationValue)\r\n\t"), GenerateVariable("{"), GenerateVariable("\r\n\t"), GenerateVariable(convert_enum_to_name_case_->Variable_Field()), GenerateVariable("\r\n\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\treturn \"\";\r\n"), GenerateVariable("}"), GenerateVariable("\r\n") }));
			*convert_enum_to_name_case_ = Variable_convert_enum_to_name_case_(this, std::vector<VariableBase*>({ GenerateVariable("case "), GenerateVariable(enum_type_->This()), GenerateVariable("::"), GenerateVariable(member_->This()), GenerateVariable("_:\r\n"), GenerateVariable("{"), GenerateVariable("\r\n\treturn \""), GenerateVariable(member_->This()), GenerateVariable("\";\r\n"), GenerateVariable("}"), GenerateVariable("\r\n") }));
			*delete_member_ = Variable_delete_member_(this, std::vector<VariableBase*>({ GenerateVariable("delete "), GenerateVariable(member_->This()), GenerateVariable(";") }));
			*enum_ = Variable_enum_(this, std::vector<VariableBase*>({ GenerateVariable("enum class Type\r\n"), GenerateVariable("{"), GenerateVariable("\r\nUnknown,\r\nScope,\r\n\r\n// User defined types\r\n"), GenerateVariable(enumeration_->Variable_Field()), GenerateVariable("\r\n\r\n"), GenerateVariable("}"), GenerateVariable(";\r\n") }));
			*enum_scope_ = Variable_enum_scope_(this, std::vector<VariableBase*>({ GenerateVariable("enum class ScopeType\r\n"), GenerateVariable("{"), GenerateVariable("\r\nUnknown,\r\n\r\n// Default\r\nDefault_,\r\nUpper_,\r\nLower_,\r\n\r\nSnake_,\r\nSlash_,\r\nBackSlash_,\r\nColon_,\r\nDoubleColon_,\r\n\r\nVariable_Field_,\r\nVariable_Field_Separator_,\r\nFunction_Field_,\r\nFunction_Field_Separator_,\r\n\r\n"), GenerateVariable(enum_scope_enumeration_->Variable_Field()), GenerateVariable("\r\n"), GenerateVariable("}"), GenerateVariable(";\r\n") }));
			*enum_scope_enumeration_ = Variable_enum_scope_enumeration_(this, std::vector<VariableBase*>({ GenerateVariable(scope_->This()), GenerateVariable("_,") }));
			*enum_scope_type_ = Variable_enum_scope_type_(this, std::vector<VariableBase*>({ GenerateVariable("::"), GenerateVariable(namespace_->This()), GenerateVariable("::"), GenerateVariable(class_name_->This()), GenerateVariable("::ScopeType") }));
			*enum_type_ = Variable_enum_type_(this, std::vector<VariableBase*>({ GenerateVariable("::"), GenerateVariable(namespace_->This()), GenerateVariable("::"), GenerateVariable(class_name_->This()), GenerateVariable("::Type") }));
			*enumeration_ = Variable_enumeration_(this, std::vector<VariableBase*>({ GenerateVariable(member_->This()), GenerateVariable("_,") }));
			*file_ = Variable_file_(this, std::vector<VariableBase*>({  }));
			*header_guard_ = Variable_header_guard_(this, std::vector<VariableBase*>({ GenerateVariable(namespace_upper_->Underscore()), GenerateVariable("_"), GenerateVariable(class_name_->Upper()), GenerateVariable("_"), GenerateVariable(file_->Extension()) }));
			*left_angle_bracket_ = Variable_left_angle_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("<") }));
			*left_bracket_ = Variable_left_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("{") }));
			*left_curly_bracket_ = Variable_left_curly_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("(") }));
			*member_ = Variable_member_(this, std::vector<VariableBase*>({  }));
			*member_class_declaration_ = Variable_member_class_declaration_(this, std::vector<VariableBase*>({ GenerateVariable("\r\nstruct "), GenerateVariable(member_type_->This()), GenerateVariable(" : public VariableScopes\r\n"), GenerateVariable("{"), GenerateVariable("\r\n\r\nstatic constexpr auto name = \""), GenerateVariable(member_->This()), GenerateVariable("\";\r\n\r\n"), GenerateVariable(scope_field_->Variable_Field()), GenerateVariable("\r\n\r\n"), GenerateVariable(member_type_->This()), GenerateVariable("() : VariableScopes()\r\n"), GenerateVariable("{"), GenerateVariable("\r\n\ttype = "), GenerateVariable(enum_type_->This()), GenerateVariable("::"), GenerateVariable(member_->This()), GenerateVariable(";\r\n"), GenerateVariable("}"), GenerateVariable("\r\n\r\nvirtual ~"), GenerateVariable(member_type_->This()), GenerateVariable("() override = default;\r\n\r\n"), GenerateVariable(member_type_->This()), GenerateVariable("("), GenerateVariable(class_name_->This()), GenerateVariable("* "), GenerateVariable(class_name_->Lower()), GenerateVariable("_, const std::vector<VariableBase*"), GenerateVariable(right_angle_bracket_->This()), GenerateVariable("& variables) : VariableScopes(variables)\r\n"), GenerateVariable("{"), GenerateVariable("\r\ntype = "), GenerateVariable(enum_type_->This()), GenerateVariable("::"), GenerateVariable(member_->This()), GenerateVariable(";\r\n"), GenerateVariable(scope_initialize_->Variable_Field()), GenerateVariable("\r\n"), GenerateVariable("}"), GenerateVariable("\r\n\r\n"), GenerateVariable(scope_function_->Variable_Field()), GenerateVariable("\r\n\r\n"), GenerateVariable(member_type_->This()), GenerateVariable("& operator=(const "), GenerateVariable(member_type_->This()), GenerateVariable("& variable)\r\n"), GenerateVariable("{"), GenerateVariable("\r\n\tif (&variable == this)\r\n\t"), GenerateVariable("{"), GenerateVariable("\r\n\t\treturn *this;\r\n\t"), GenerateVariable("}"), GenerateVariable("\r\n\r\n\tvalue = variable"), GenerateVariable("."), GenerateVariable("value;\r\n\tisString = variable"), GenerateVariable("."), GenerateVariable("isString;\r\n\r\n\t"), GenerateVariable(scope_assignment_->Variable_Field()), GenerateVariable("\r\n\r\n\treturn *this;\r\n"), GenerateVariable("}"), GenerateVariable("\r\n\r\n"), GenerateVariable("}"), GenerateVariable(";") }));
			*member_declaration_ = Variable_member_declaration_(this, std::vector<VariableBase*>({ GenerateVariable(member_type_->This()), GenerateVariable("* "), GenerateVariable(member_->This()), GenerateVariable(" = new "), GenerateVariable(member_type_->This()), GenerateVariable("();") }));
			*member_fields_ = Variable_member_fields_(this, std::vector<VariableBase*>({  }));
			*member_initialization_ = Variable_member_initialization_(this, std::vector<VariableBase*>({ GenerateVariable("*"), GenerateVariable(member_->This()), GenerateVariable(" = "), GenerateVariable(member_type_->This()), GenerateVariable("(this, std::vector<VariableBase*"), GenerateVariable(right_angle_bracket_->This()), GenerateVariable("("), GenerateVariable("{"), GenerateVariable(" "), GenerateVariable(member_fields_->This()), GenerateVariable(" "), GenerateVariable("}"), GenerateVariable("));") }));
			*member_type_ = Variable_member_type_(this, std::vector<VariableBase*>({ GenerateVariable("Variable_"), GenerateVariable(member_->This()) }));
			*namespace_ = Variable_namespace_(this, std::vector<VariableBase*>({ GenerateVariable(file_->Namespace()) }));
			*namespace_upper_ = Variable_namespace_upper_(this, std::vector<VariableBase*>({ GenerateVariable(namespace_->Upper()) }));
			*register_member_ = Variable_register_member_(this, std::vector<VariableBase*>({ GenerateVariable("variables_"), GenerateVariable("."), GenerateVariable("emplace_back("), GenerateVariable(member_->This()), GenerateVariable("_);") }));
			*right_angle_bracket_ = Variable_right_angle_bracket_(this, std::vector<VariableBase*>({ GenerateVariable(">") }));
			*right_bracket_ = Variable_right_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("}") }));
			*right_curly_bracket_ = Variable_right_curly_bracket_(this, std::vector<VariableBase*>({ GenerateVariable(")") }));
			*scope_ = Variable_scope_(this, std::vector<VariableBase*>({  }));
			*scope_arguments_ = Variable_scope_arguments_(this, std::vector<VariableBase*>({  }));
			*scope_assignment_ = Variable_scope_assignment_(this, std::vector<VariableBase*>({ GenerateVariable("*"), GenerateVariable(scope_->This()), GenerateVariable("_ = *variable"), GenerateVariable("."), GenerateVariable(scope_->This()), GenerateVariable("_;") }));
			*scope_field_ = Variable_scope_field_(this, std::vector<VariableBase*>({ GenerateVariable("VariableBase* "), GenerateVariable(scope_->This()), GenerateVariable("_ = GenerateVariable(\"\");") }));
			*scope_function_ = Variable_scope_function_(this, std::vector<VariableBase*>({ GenerateVariable("\r\nVariableBase* "), GenerateVariable(scope_->This()), GenerateVariable("() const\r\n"), GenerateVariable("{"), GenerateVariable("\r\n\treturn "), GenerateVariable(scope_->This()), GenerateVariable("_;\r\n"), GenerateVariable("}") }));
			*scope_initialize_ = Variable_scope_initialize_(this, std::vector<VariableBase*>({ GenerateVariable("*static_cast<VariableBase*"), GenerateVariable(right_angle_bracket_->This()), GenerateVariable("("), GenerateVariable(scope_->This()), GenerateVariable("_) = VariableBase(std::vector<VariableBase*"), GenerateVariable(right_angle_bracket_->This()), GenerateVariable("("), GenerateVariable("{"), GenerateVariable(" "), GenerateVariable(scope_arguments_->This()), GenerateVariable(" "), GenerateVariable("}"), GenerateVariable("));\r\n"), GenerateVariable(scope_->This()), GenerateVariable("_-"), GenerateVariable(right_angle_bracket_->This()), GenerateVariable("type = "), GenerateVariable(enum_type_->This()), GenerateVariable("::Scope;\r\n") }));


			variables_.emplace_back(class_name_);
			variables_.emplace_back(convert_enum_scope_to_name_);
			variables_.emplace_back(convert_enum_to_name_);
			variables_.emplace_back(convert_enum_to_name_case_);
			variables_.emplace_back(delete_member_);
			variables_.emplace_back(enum_);
			variables_.emplace_back(enum_scope_);
			variables_.emplace_back(enum_scope_enumeration_);
			variables_.emplace_back(enum_scope_type_);
			variables_.emplace_back(enum_type_);
			variables_.emplace_back(enumeration_);
			variables_.emplace_back(file_);
			variables_.emplace_back(header_guard_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(member_);
			variables_.emplace_back(member_class_declaration_);
			variables_.emplace_back(member_declaration_);
			variables_.emplace_back(member_fields_);
			variables_.emplace_back(member_initialization_);
			variables_.emplace_back(member_type_);
			variables_.emplace_back(namespace_);
			variables_.emplace_back(namespace_upper_);
			variables_.emplace_back(register_member_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
			variables_.emplace_back(scope_);
			variables_.emplace_back(scope_arguments_);
			variables_.emplace_back(scope_assignment_);
			variables_.emplace_back(scope_field_);
			variables_.emplace_back(scope_function_);
			variables_.emplace_back(scope_initialize_);

		}

		virtual ~ConstructionGeneratorTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DST_USER_CONSTRUCTIONGENERATORTEMPLATE_h
