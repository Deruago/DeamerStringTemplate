
#line 3 "lex.DST_Setting.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer DST_Setting_create_buffer
#define yy_delete_buffer DST_Setting_delete_buffer
#define yy_scan_buffer DST_Setting_scan_buffer
#define yy_scan_string DST_Setting_scan_string
#define yy_scan_bytes DST_Setting_scan_bytes
#define yy_init_buffer DST_Setting_init_buffer
#define yy_flush_buffer DST_Setting_flush_buffer
#define yy_load_buffer_state DST_Setting_load_buffer_state
#define yy_switch_to_buffer DST_Setting_switch_to_buffer
#define yypush_buffer_state DST_Settingpush_buffer_state
#define yypop_buffer_state DST_Settingpop_buffer_state
#define yyensure_buffer_stack DST_Settingensure_buffer_stack
#define yy_flex_debug DST_Setting_flex_debug
#define yyin DST_Settingin
#define yyleng DST_Settingleng
#define yylex DST_Settinglex
#define yylineno DST_Settinglineno
#define yyout DST_Settingout
#define yyrestart DST_Settingrestart
#define yytext DST_Settingtext
#define yywrap DST_Settingwrap
#define yyalloc DST_Settingalloc
#define yyrealloc DST_Settingrealloc
#define yyfree DST_Settingfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define DST_Setting_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer DST_Setting_create_buffer
#endif

#ifdef yy_delete_buffer
#define DST_Setting_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer DST_Setting_delete_buffer
#endif

#ifdef yy_scan_buffer
#define DST_Setting_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer DST_Setting_scan_buffer
#endif

#ifdef yy_scan_string
#define DST_Setting_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string DST_Setting_scan_string
#endif

#ifdef yy_scan_bytes
#define DST_Setting_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes DST_Setting_scan_bytes
#endif

#ifdef yy_init_buffer
#define DST_Setting_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer DST_Setting_init_buffer
#endif

#ifdef yy_flush_buffer
#define DST_Setting_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer DST_Setting_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define DST_Setting_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state DST_Setting_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define DST_Setting_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer DST_Setting_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define DST_Settingpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state DST_Settingpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define DST_Settingpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state DST_Settingpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define DST_Settingensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack DST_Settingensure_buffer_stack
#endif

#ifdef yylex
#define DST_Settinglex_ALREADY_DEFINED
#else
#define yylex DST_Settinglex
#endif

#ifdef yyrestart
#define DST_Settingrestart_ALREADY_DEFINED
#else
#define yyrestart DST_Settingrestart
#endif

#ifdef yylex_init
#define DST_Settinglex_init_ALREADY_DEFINED
#else
#define yylex_init DST_Settinglex_init
#endif

#ifdef yylex_init_extra
#define DST_Settinglex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra DST_Settinglex_init_extra
#endif

#ifdef yylex_destroy
#define DST_Settinglex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy DST_Settinglex_destroy
#endif

#ifdef yyget_debug
#define DST_Settingget_debug_ALREADY_DEFINED
#else
#define yyget_debug DST_Settingget_debug
#endif

#ifdef yyset_debug
#define DST_Settingset_debug_ALREADY_DEFINED
#else
#define yyset_debug DST_Settingset_debug
#endif

#ifdef yyget_extra
#define DST_Settingget_extra_ALREADY_DEFINED
#else
#define yyget_extra DST_Settingget_extra
#endif

#ifdef yyset_extra
#define DST_Settingset_extra_ALREADY_DEFINED
#else
#define yyset_extra DST_Settingset_extra
#endif

#ifdef yyget_in
#define DST_Settingget_in_ALREADY_DEFINED
#else
#define yyget_in DST_Settingget_in
#endif

#ifdef yyset_in
#define DST_Settingset_in_ALREADY_DEFINED
#else
#define yyset_in DST_Settingset_in
#endif

#ifdef yyget_out
#define DST_Settingget_out_ALREADY_DEFINED
#else
#define yyget_out DST_Settingget_out
#endif

#ifdef yyset_out
#define DST_Settingset_out_ALREADY_DEFINED
#else
#define yyset_out DST_Settingset_out
#endif

#ifdef yyget_leng
#define DST_Settingget_leng_ALREADY_DEFINED
#else
#define yyget_leng DST_Settingget_leng
#endif

#ifdef yyget_text
#define DST_Settingget_text_ALREADY_DEFINED
#else
#define yyget_text DST_Settingget_text
#endif

#ifdef yyget_lineno
#define DST_Settingget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno DST_Settingget_lineno
#endif

#ifdef yyset_lineno
#define DST_Settingset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno DST_Settingset_lineno
#endif

#ifdef yywrap
#define DST_Settingwrap_ALREADY_DEFINED
#else
#define yywrap DST_Settingwrap
#endif

#ifdef yyalloc
#define DST_Settingalloc_ALREADY_DEFINED
#else
#define yyalloc DST_Settingalloc
#endif

#ifdef yyrealloc
#define DST_Settingrealloc_ALREADY_DEFINED
#else
#define yyrealloc DST_Settingrealloc
#endif

#ifdef yyfree
#define DST_Settingfree_ALREADY_DEFINED
#else
#define yyfree DST_Settingfree
#endif

#ifdef yytext
#define DST_Settingtext_ALREADY_DEFINED
#else
#define yytext DST_Settingtext
#endif

#ifdef yyleng
#define DST_Settingleng_ALREADY_DEFINED
#else
#define yyleng DST_Settingleng
#endif

#ifdef yyin
#define DST_Settingin_ALREADY_DEFINED
#else
#define yyin DST_Settingin
#endif

#ifdef yyout
#define DST_Settingout_ALREADY_DEFINED
#else
#define yyout DST_Settingout
#endif

#ifdef yy_flex_debug
#define DST_Setting_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug DST_Setting_flex_debug
#endif

#ifdef yylineno
#define DST_Settinglineno_ALREADY_DEFINED
#else
#define yylineno DST_Settinglineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define DST_Settingwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 55
#define YY_END_OF_BUFFER 56
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[357] =
    {   0,
       53,   53,   56,   54,   53,   53,   54,   54,   54,    3,
       54,   54,    5,   54,   54,   10,    7,    8,   54,   54,
       54,   53,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    4,    0,    0,    0,
        0,    0,    0,    0,    0,    9,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       10,   10,    0,    1,    0,    0,    0,    0,    0,    0,
        0,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   13,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   16,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   15,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   31,   30,   34,   32,   29,
       33,   25,   24,   28,   26,   23,   27,   49,   48,   52,
       50,   47,   51,   37,   36,   40,   38,   35,   39,   19,
       18,   22,   20,   17,   21,    0,   43,   42,   46,   44,
       41,   45,    0,    0,    6,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    6,    1,    1,    7,    1,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   15,   15,   15,   15,   15,
       15,   15,   16,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       17,    1,   18,    1,    8,    1,   19,   15,   15,   20,

       15,   15,   15,   15,   21,   15,   15,   22,   15,   23,
       15,   15,   15,   15,   15,   15,   15,   24,   15,   15,
       15,   15,   25,   26,   27,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[28] =
    {   0,
        1,    1,    1,    2,    3,    1,    1,    4,    5,    1,
        1,    1,    6,    7,    4,    4,    1,    1,    4,    4,
        4,    4,    4,    4,    1,    8,    1
    } ;

static const flex_int16_t yy_base[543] =
    {   0,
        0,    0, 1854, 1855,   26,   28,   28,   51, 1842, 1855,
       74, 1840, 1855,   97,  120, 1843,   18, 1855, 1825,  143,
     1822,   33, 1838, 1837, 1836, 1833, 1834, 1833, 1832, 1831,
     1830, 1829, 1826, 1827, 1826, 1825, 1855, 1824, 1823, 1822,
     1819, 1820, 1819, 1818, 1815, 1855, 1816, 1815, 1814, 1811,
     1812, 1811, 1810, 1809, 1808, 1807, 1804, 1805, 1804, 1803,
        0, 1804, 1788, 1855, 1800, 1799, 1798, 1795, 1796, 1795,
     1794, 1855, 1791, 1790, 1789, 1788,   36, 1787, 1786, 1785,
     1784, 1783, 1782, 1781,   38, 1780, 1779, 1778, 1777, 1776,
     1775, 1774,   35, 1773, 1772, 1771, 1770, 1769, 1768, 1767,

       33, 1766, 1765, 1764, 1763, 1762, 1761, 1760,   37, 1759,
     1758, 1757, 1744, 1755, 1754, 1753, 1752,   40, 1751, 1750,
     1749, 1748,   55, 1747,   57, 1746,   59, 1855,   68, 1745,
       45, 1744,   61, 1743,   64, 1742,   70, 1741,   58, 1740,
       77, 1855,   80, 1739,   81, 1738,   83, 1737,   79, 1736,
       92, 1735,  103, 1734,  100, 1855,  104, 1733,   86, 1732,
      105, 1731,  102, 1730,  114, 1729,  115, 1728,  123,  109,
     1855, 1727,  124, 1726,  126, 1725,  119, 1724,  137, 1723,
      138, 1722,  130,  146, 1855, 1721,  142, 1720,  147, 1719,
      139, 1711, 1717,  158, 1716,  159, 1715,  154,  155, 1855,

     1714,  160, 1713,  162, 1712,  156,    0, 1719,  171,    0,
     1718,  172,    0, 1717,  176,    0,  166, 1617,    0,  175,
     1601,    0,  168, 1585,    0, 1568,  186,    0, 1552,  181,
        0, 1536,  183,    0,  184, 1519,    0,  187, 1503,    0,
      179, 1487,    0, 1467,  196,    0, 1451,  197,    0, 1435,
      194,    0,  198, 1418,    0,  200, 1402,    0,  192, 1386,
        0, 1366,  203,    0, 1350,  208,    0, 1334,  207,    0,
      209, 1316,    0,  211, 1300,    0,  205, 1284,    0, 1267,
      220,    0, 1251,  221,    0, 1235,  218,    0,  216, 1218,
        0,  222, 1202,    0,  223, 1186, 1162,    0, 1142,  233,

        0, 1126,  234,    0,  227,  229,    0,  230,  226,    0,
      236,  225,    0,  228,  221, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1855,  223, 1855, 1855, 1855, 1855,
     1855, 1855,  124,   85, 1855, 1855,  254,   77,  262,  270,
      278,  286,  294,   49,  302,  310,  318,  326,  334,  342,
      350,  358,  366,  374,  382,  390,  398,  406,  414,  422,
      430,  438,  446,  454,  462,  470,  478,  486,  494,  502,
      510,  518,  526,  534,  542,  550,  558,  566,  574,  582,

      590,  598,  606,  614,  622,  630,  638,  646,  654,  662,
      670,  678,  686,  694,  702,  710,  718,  726,  734,  742,
      750,  758,  766,  774,  782,  790,  798,  806,  814,  822,
      830,  838,  846,  854,  862,  870,  878,  886,  894,  902,
      910,  918,  926,  934,  942,  950,  958,  966,  974,  982,
      990,  998, 1006, 1014, 1022, 1030, 1038, 1046, 1054, 1062,
     1070, 1078, 1086, 1094, 1102, 1110, 1118, 1126, 1134, 1142,
     1150, 1158, 1166, 1174, 1182, 1190, 1198, 1206, 1214, 1222,
     1230, 1238, 1246, 1254, 1262, 1270, 1278, 1286, 1294, 1302,
     1310, 1318, 1326, 1334, 1342, 1350, 1358, 1366, 1374, 1382,

     1390, 1398, 1406, 1414, 1422, 1430, 1438, 1446, 1454, 1462,
     1470, 1478, 1486, 1494, 1502, 1510, 1518, 1526, 1534, 1542,
     1550, 1558, 1566, 1574, 1582, 1590, 1598, 1606, 1614, 1622,
     1630, 1637, 1645, 1652, 1660, 1667, 1675, 1682, 1690, 1697,
     1705, 1712
    } ;

static const flex_int16_t yy_def[543] =
    {   0,
      356,    1,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  357,  356,  356,  356,  358,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  359,  356,  356,  356,  356,
      356,  356,  360,  356,  356,  356,  356,  356,  356,  356,
      361,  356,  356,  356,  357,  356,  356,  356,  356,  362,
      356,  356,  356,  356,  356,  356,  363,  356,  356,  356,
      364,  358,  356,  356,  356,  356,  356,  365,  356,  356,
      356,  356,  366,  367,  368,  359,  359,  369,  370,  371,
      372,  373,  374,  360,  360,  375,  376,  377,  378,  379,
      380,  361,  361,  381,  382,  383,  384,  385,  386,  362,

      362,  387,  388,  389,  390,  391,  392,  363,  363,  393,
      394,  395,  356,  396,  397,  398,  365,  365,  399,  400,
      401,  366,  402,  367,  403,  368,  404,  356,  359,  369,
      405,  370,  406,  371,  407,  372,  408,  373,  409,  410,
      411,  356,  412,  413,  414,  415,  416,  417,  418,  419,
      420,  421,  422,  423,  424,  356,  425,  426,  427,  428,
      429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
      356,  439,  440,  441,  442,  443,  444,  445,  446,  447,
      448,  449,  450,  451,  356,  452,  453,  454,  455,  456,
      457,  356,  458,  459,  460,  461,  462,  463,  464,  356,

      465,  466,  467,  468,  469,  470,  471,  471,  472,  473,
      473,  474,  475,  475,  476,  477,  478,  477,  479,  480,
      479,  481,  482,  481,  483,  483,  484,  485,  485,  486,
      487,  487,  488,  489,  490,  489,  491,  492,  491,  493,
      494,  493,  495,  495,  496,  497,  497,  498,  499,  499,
      500,  501,  502,  501,  503,  504,  503,  505,  506,  505,
      507,  507,  508,  509,  509,  510,  511,  511,  512,  513,
      514,  513,  515,  516,  515,  517,  518,  517,  519,  519,
      520,  521,  521,  522,  523,  523,  524,  525,  526,  525,
      527,  528,  527,  529,  530,  529,  356,  531,  531,  532,

      533,  533,  534,  535,  535,  536,  537,  538,  537,  539,
      540,  539,  541,  542,  541,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,    0,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356
    } ;

static const flex_int16_t yy_nxt[1883] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,    4,   11,   12,
       13,    4,   14,   15,   16,   16,   17,   18,   16,   16,
       16,   16,   16,   16,   19,   20,   21,   22,   22,   22,
       22,   23,   24,   63,   22,   22,   25,   26,   63,  128,
       27,   28,  142,  156,  170,  171,  157,  129,  184,  143,
      185,  199,   61,   29,   30,   31,  217,  218,  208,   32,
       33,  211,  229,   34,   35,  200,  209,  214,  212,  230,
      215,  128,  220,  226,  221,  223,   36,   38,   39,  129,
       62,  227,   40,   41,  142,  232,   42,   43,  233,  224,
      241,  143,  235,  236,  238,  244,  239,  253,  254,   44,

       47,   48,  355,  245,  242,   49,   50,  247,  250,   51,
       52,  251,  156,  259,  248,  157,  256,  262,  257,  265,
      170,  171,   53,   54,   55,  263,  266,  260,   56,   57,
      277,  268,   58,   59,  269,  271,  272,  274,  286,  275,
      280,  287,  283,  354,  278,   60,   65,   66,  281,  284,
      295,   67,   68,  289,  290,   69,   70,  184,  292,  185,
      293,  299,  305,  302,  296,  306,  199,  314,   71,  300,
      303,  308,  309,  311,  208,  312,  211,  217,  218,  223,
      200,  315,  209,  212,  214,  229,  220,  215,  221,  226,
      241,  232,  230,  224,  233,  235,  236,  227,  238,  244,

      239,  247,  250,  259,  242,  251,  262,  245,  248,  253,
      254,  256,  265,  257,  263,  268,  277,  260,  269,  266,
      271,  272,  274,  280,  275,  283,  286,  289,  290,  287,
      278,  281,  284,  292,  295,  293,  299,  305,  302,  314,
      306,  308,  309,  353,  300,  303,  352,  311,  296,  312,
      351,  350,  349,  315,   45,   45,   45,   45,   45,   45,
       45,   45,   76,   76,   76,   76,   76,   76,   76,   76,
       84,   84,   84,   84,   84,   84,   84,   84,   92,   92,
       92,   92,   92,   92,   92,   92,  100,  100,  100,  100,
      100,  100,  100,  100,  108,  108,  108,  108,  108,  108,

      108,  108,  117,  117,  117,  117,  117,  117,  117,  117,
      122,  122,  122,  122,  122,  122,  122,  122,  124,  124,
      124,  124,  124,  124,  124,  124,  126,  126,  126,  126,
      126,  126,  126,  126,  130,  130,  130,  130,  130,  130,
      130,  130,  132,  132,  132,  132,  132,  132,  132,  132,
      134,  134,  134,  134,  134,  134,  134,  134,  136,  136,
      136,  136,  136,  136,  136,  136,  138,  138,  138,  138,
      138,  138,  138,  138,  140,  140,  140,  140,  140,  140,
      140,  140,  144,  144,  144,  144,  144,  144,  144,  144,
      146,  146,  146,  146,  146,  146,  146,  146,  148,  148,

      148,  148,  148,  148,  148,  148,  150,  150,  150,  150,
      150,  150,  150,  150,  152,  152,  152,  152,  152,  152,
      152,  152,  154,  154,  154,  154,  154,  154,  154,  154,
      158,  158,  158,  158,  158,  158,  158,  158,  160,  160,
      160,  160,  160,  160,  160,  160,  162,  162,  162,  162,
      162,  162,  162,  162,  164,  164,  164,  164,  164,  164,
      164,  164,  166,  166,  166,  166,  166,  166,  166,  166,
      168,  168,  168,  168,  168,  168,  168,  168,  172,  172,
      172,  172,  172,  172,  172,  172,  174,  174,  174,  174,
      174,  174,  174,  174,  176,  176,  176,  176,  176,  176,

      176,  176,  178,  178,  178,  178,  178,  178,  178,  178,
      180,  180,  180,  180,  180,  180,  180,  180,  182,  182,
      182,  182,  182,  182,  182,  182,  186,  186,  186,  186,
      186,  186,  186,  186,  188,  188,  188,  188,  188,  188,
      188,  188,  190,  190,  190,  190,  190,  190,  190,  190,
      193,  193,  193,  193,  193,  193,  193,  193,  195,  195,
      195,  195,  195,  195,  195,  195,  197,  197,  197,  197,
      197,  197,  197,  197,  201,  201,  201,  201,  201,  201,
      201,  201,  203,  203,  203,  203,  203,  203,  203,  203,
      205,  205,  205,  205,  205,  205,  205,  205,  207,  207,

      207,  207,  207,  207,  207,  207,  210,  210,  210,  210,
      210,  210,  210,  210,  213,  213,  213,  213,  213,  213,
      213,  213,  216,  216,  216,  216,  216,  216,  216,  216,
      219,  219,  219,  219,  219,  219,  219,  219,  222,  222,
      222,  222,  222,  222,  222,  222,  225,  225,  225,  225,
      225,  225,  225,  225,  228,  228,  228,  228,  228,  228,
      228,  228,  140,  140,  140,  140,  140,  140,  140,  140,
      231,  231,  231,  231,  231,  231,  231,  231,   84,   84,
       84,   84,   84,   84,   84,   84,  144,  144,  144,  144,
      144,  144,  144,  144,  234,  234,  234,  234,  234,  234,

      234,  234,  146,  146,  146,  146,  146,  146,  146,  146,
      237,  237,  237,  237,  237,  237,  237,  237,  148,  148,
      148,  148,  148,  148,  148,  148,  240,  240,  240,  240,
      240,  240,  240,  240,  150,  150,  150,  150,  150,  150,
      150,  150,  243,  243,  243,  243,  243,  243,  243,  243,
      152,  152,  152,  152,  152,  152,  152,  152,  246,  246,
      246,  246,  246,  246,  246,  246,  154,  154,  154,  154,
      154,  154,  154,  154,  249,  249,  249,  249,  249,  249,
      249,  249,   92,   92,   92,   92,   92,   92,   92,   92,
      158,  158,  158,  158,  158,  158,  158,  158,  252,  252,

      252,  252,  252,  252,  252,  252,  160,  160,  160,  160,
      160,  160,  160,  160,  255,  255,  255,  255,  255,  255,
      255,  255,  162,  162,  162,  162,  162,  162,  162,  162,
      258,  258,  258,  258,  258,  258,  258,  258,  164,  164,
      164,  164,  164,  164,  164,  164,  261,  261,  261,  261,
      261,  261,  261,  261,  166,  166,  166,  166,  166,  166,
      166,  166,  264,  264,  264,  264,  264,  264,  264,  264,
      168,  168,  168,  168,  168,  168,  168,  168,  267,  267,
      267,  267,  267,  267,  267,  267,  100,  100,  100,  100,
      100,  100,  100,  100,  172,  172,  172,  172,  172,  172,

      172,  172,  270,  270,  270,  270,  270,  270,  270,  270,
      174,  174,  174,  174,  174,  174,  174,  174,  273,  273,
      273,  273,  273,  273,  273,  273,  176,  176,  176,  176,
      176,  176,  176,  176,  276,  276,  276,  276,  276,  276,
      276,  276,  178,  178,  178,  178,  178,  178,  178,  178,
      279,  279,  279,  279,  279,  279,  279,  279,  180,  180,
      180,  180,  180,  180,  180,  180,  282,  282,  282,  282,
      282,  282,  282,  282,  182,  182,  182,  182,  182,  182,
      182,  182,  285,  285,  285,  285,  285,  285,  285,  285,
      108,  108,  108,  108,  108,  108,  108,  108,  186,  186,

      186,  186,  186,  186,  186,  186,  288,  288,  288,  288,
      288,  288,  288,  288,  188,  188,  188,  188,  188,  188,
      188,  188,  291,  291,  291,  291,  291,  291,  291,  291,
      190,  190,  190,  190,  190,  190,  190,  190,  294,  294,
      294,  294,  294,  294,  294,  294,  193,  193,  193,  193,
      193,  193,  193,  193,  298,  298,  298,  298,  298,  298,
      298,  298,  195,  195,  195,  195,  195,  195,  195,  195,
      301,  301,  301,  301,  301,  301,  301,  301,  197,  197,
      197,  197,  197,  197,  197,  197,  304,  304,  304,  304,
      304,  304,  304,  304,  117,  117,  117,  117,  117,  117,

      117,  117,  201,  201,  201,  201,  201,  201,  201,  201,
      307,  307,  307,  307,  307,  307,  307,  307,  203,  203,
      203,  203,  203,  203,  203,  203,  310,  310,  310,  310,
      310,  310,  310,  310,  205,  205,  205,  205,  205,  205,
      205,  205,  313,  313,  313,  313,  313,  313,  313,  313,
      122,  348,  122,  122,  122,  122,  122,  122,  207,  207,
      207,  207,  207,  207,  207,  207,  124,  347,  124,  124,
      124,  124,  124,  124,  210,  210,  210,  210,  210,  210,
      210,  210,  126,  346,  126,  126,  126,  126,  126,  126,
      213,  213,  213,  213,  213,  213,  213,  213,  130,  345,

      130,  130,  130,  130,  130,  130,  216,  216,  216,  216,
      216,  216,  216,  216,  132,  344,  132,  132,  132,  132,
      132,  132,  219,  219,  219,  219,  219,  219,  219,  219,
      134,  343,  134,  134,  134,  134,  134,  134,  222,  222,
      222,  222,  222,  222,  222,  222,  136,  136,  342,  136,
      136,  136,  136,  136,  225,  225,  225,  225,  225,  225,
      225,  225,  138,  138,  341,  138,  138,  138,  138,  138,
      228,  228,  228,  228,  228,  228,  228,  228,  140,  140,
      340,  140,  140,  140,  140,  140,  231,  231,  231,  231,
      231,  231,  231,  231,  144,  144,  339,  144,  144,  144,

      144,  144,  234,  234,  234,  234,  234,  234,  234,  234,
      146,  146,  338,  146,  146,  146,  146,  146,  237,  237,
      237,  237,  237,  237,  237,  237,  148,  148,  337,  148,
      148,  148,  148,  148,  240,  240,  240,  240,  240,  240,
      240,  240,  150,  150,  150,  150,  336,  150,  150,  150,
      243,  243,  243,  243,  243,  243,  243,  243,  152,  152,
      152,  152,  335,  152,  152,  152,  246,  246,  246,  246,
      246,  246,  246,  246,  154,  154,  154,  154,  334,  154,
      154,  154,  249,  249,  249,  249,  249,  249,  249,  249,
      158,  158,  158,  158,  333,  158,  158,  158,  252,  252,

      252,  252,  252,  252,  252,  252,  160,  160,  160,  160,
      332,  160,  160,  160,  255,  255,  255,  255,  255,  255,
      255,  255,  162,  162,  162,  162,  331,  162,  162,  162,
      258,  258,  258,  258,  258,  258,  258,  258,  164,  164,
      164,  164,  164,  330,  164,  164,  261,  261,  261,  261,
      261,  261,  261,  261,  166,  166,  166,  166,  166,  329,
      166,  166,  264,  264,  264,  264,  264,  264,  264,  264,
      168,  168,  168,  168,  168,  328,  168,  168,  267,  267,
      267,  267,  267,  267,  267,  267,  172,  172,  172,  172,
      172,  327,  172,  172,  270,  270,  270,  270,  270,  270,

      270,  270,  174,  174,  174,  174,  174,  326,  174,  174,
      273,  273,  273,  273,  273,  273,  273,  273,  176,  176,
      176,  176,  176,  325,  176,  176,  276,  276,  276,  276,
      276,  276,  276,  276,  178,  178,  178,  178,  178,  178,
      324,  178,  279,  279,  279,  279,  279,  279,  279,  279,
      180,  180,  180,  180,  180,  180,  323,  180,  282,  282,
      282,  282,  282,  282,  282,  282,  182,  182,  182,  182,
      182,  182,  322,  182,  285,  285,  285,  285,  285,  285,
      285,  285,  186,  186,  186,  186,  186,  186,  321,  186,
      288,  288,  288,  288,  288,  288,  288,  288,  188,  188,

      188,  188,  188,  188,  320,  188,  291,  291,  291,  291,
      291,  291,  291,  291,  190,  190,  190,  190,  190,  190,
      319,  190,  294,  294,  294,  294,  294,  294,  294,  294,
      193,  193,  193,  193,  193,  193,  193,  298,  298,  298,
      298,  298,  298,  298,  298,  195,  195,  195,  195,  195,
      195,  195,  301,  301,  301,  301,  301,  301,  301,  301,
      197,  197,  197,  197,  197,  197,  197,  304,  304,  304,
      304,  304,  304,  304,  304,  201,  201,  201,  201,  201,
      201,  201,  307,  307,  307,  307,  307,  307,  307,  307,
      203,  203,  203,  203,  203,  203,  203,  310,  310,  310,

      310,  310,  310,  310,  310,  205,  205,  205,  205,  205,
      205,  205,  313,  313,  313,  313,  313,  313,  313,  313,
      318,  317,  316,  206,  204,  202,  198,  196,  194,  297,
      191,  189,  187,  183,  181,  179,  177,  175,  173,  169,
      167,  165,  163,  161,  159,  155,  153,  151,  149,  147,
      145,  141,  139,  137,  135,  133,  131,  127,  125,  123,
      206,  204,  202,  118,  198,  196,  194,  192,  191,  189,
      187,  109,  183,  181,  179,  177,  175,  173,  101,  169,
      167,  165,  163,  161,  159,   93,  155,  153,  151,  149,
      147,  145,   85,  141,  139,  137,  135,  133,  131,   77,

      127,  125,  123,  121,  120,  119,  118,  116,  115,  114,
      113,   61,  112,  111,  110,  109,  107,  106,  105,  104,
      103,  102,  101,   99,   98,   97,   46,   96,   95,   94,
       93,   91,   90,   89,   88,   87,   86,   85,   83,   82,
       81,   80,   79,   78,   77,   75,   74,   73,   72,   64,
       61,   46,   37,  356,    3,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356
    } ;

static const flex_int16_t yy_chk[1883] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    6,
        6,    7,    7,   17,   22,   22,    7,    7,   17,   77,
        7,    7,   85,   93,  101,  101,   93,   77,  109,   85,
      109,  118,  364,    7,    8,    8,  131,  131,  123,    8,
        8,  125,  139,    8,    8,  118,  123,  127,  125,  139,
      127,  129,  133,  137,  133,  135,    8,   11,   11,  129,
      358,  137,   11,   11,  143,  141,   11,   11,  141,  135,
      149,  143,  145,  145,  147,  151,  147,  159,  159,   11,

       14,   14,  354,  151,  149,   14,   14,  153,  155,   14,
       14,  155,  157,  163,  153,  157,  161,  165,  161,  167,
      170,  170,   14,   15,   15,  165,  167,  163,   15,   15,
      177,  169,   15,   15,  169,  173,  173,  175,  183,  175,
      179,  183,  181,  353,  177,   15,   20,   20,  179,  181,
      191,   20,   20,  187,  187,   20,   20,  184,  189,  184,
      189,  194,  198,  196,  191,  198,  199,  206,   20,  194,
      196,  202,  202,  204,  209,  204,  212,  217,  217,  223,
      199,  206,  209,  212,  215,  230,  220,  215,  220,  227,
      241,  233,  230,  223,  233,  235,  235,  227,  238,  245,

      238,  248,  251,  259,  241,  251,  263,  245,  248,  253,
      253,  256,  266,  256,  263,  269,  277,  259,  269,  266,
      271,  271,  274,  281,  274,  284,  287,  289,  289,  287,
      277,  281,  284,  292,  295,  292,  300,  306,  303,  314,
      306,  308,  308,  346,  300,  303,  315,  311,  295,  311,
      312,  309,  305,  314,  357,  357,  357,  357,  357,  357,
      357,  357,  359,  359,  359,  359,  359,  359,  359,  359,
      360,  360,  360,  360,  360,  360,  360,  360,  361,  361,
      361,  361,  361,  361,  361,  361,  362,  362,  362,  362,
      362,  362,  362,  362,  363,  363,  363,  363,  363,  363,

      363,  363,  365,  365,  365,  365,  365,  365,  365,  365,
      366,  366,  366,  366,  366,  366,  366,  366,  367,  367,
      367,  367,  367,  367,  367,  367,  368,  368,  368,  368,
      368,  368,  368,  368,  369,  369,  369,  369,  369,  369,
      369,  369,  370,  370,  370,  370,  370,  370,  370,  370,
      371,  371,  371,  371,  371,  371,  371,  371,  372,  372,
      372,  372,  372,  372,  372,  372,  373,  373,  373,  373,
      373,  373,  373,  373,  374,  374,  374,  374,  374,  374,
      374,  374,  375,  375,  375,  375,  375,  375,  375,  375,
      376,  376,  376,  376,  376,  376,  376,  376,  377,  377,

      377,  377,  377,  377,  377,  377,  378,  378,  378,  378,
      378,  378,  378,  378,  379,  379,  379,  379,  379,  379,
      379,  379,  380,  380,  380,  380,  380,  380,  380,  380,
      381,  381,  381,  381,  381,  381,  381,  381,  382,  382,
      382,  382,  382,  382,  382,  382,  383,  383,  383,  383,
      383,  383,  383,  383,  384,  384,  384,  384,  384,  384,
      384,  384,  385,  385,  385,  385,  385,  385,  385,  385,
      386,  386,  386,  386,  386,  386,  386,  386,  387,  387,
      387,  387,  387,  387,  387,  387,  388,  388,  388,  388,
      388,  388,  388,  388,  389,  389,  389,  389,  389,  389,

      389,  389,  390,  390,  390,  390,  390,  390,  390,  390,
      391,  391,  391,  391,  391,  391,  391,  391,  392,  392,
      392,  392,  392,  392,  392,  392,  393,  393,  393,  393,
      393,  393,  393,  393,  394,  394,  394,  394,  394,  394,
      394,  394,  395,  395,  395,  395,  395,  395,  395,  395,
      396,  396,  396,  396,  396,  396,  396,  396,  397,  397,
      397,  397,  397,  397,  397,  397,  398,  398,  398,  398,
      398,  398,  398,  398,  399,  399,  399,  399,  399,  399,
      399,  399,  400,  400,  400,  400,  400,  400,  400,  400,
      401,  401,  401,  401,  401,  401,  401,  401,  402,  402,

      402,  402,  402,  402,  402,  402,  403,  403,  403,  403,
      403,  403,  403,  403,  404,  404,  404,  404,  404,  404,
      404,  404,  405,  405,  405,  405,  405,  405,  405,  405,
      406,  406,  406,  406,  406,  406,  406,  406,  407,  407,
      407,  407,  407,  407,  407,  407,  408,  408,  408,  408,
      408,  408,  408,  408,  409,  409,  409,  409,  409,  409,
      409,  409,  410,  410,  410,  410,  410,  410,  410,  410,
      411,  411,  411,  411,  411,  411,  411,  411,  412,  412,
      412,  412,  412,  412,  412,  412,  413,  413,  413,  413,
      413,  413,  413,  413,  414,  414,  414,  414,  414,  414,

      414,  414,  415,  415,  415,  415,  415,  415,  415,  415,
      416,  416,  416,  416,  416,  416,  416,  416,  417,  417,
      417,  417,  417,  417,  417,  417,  418,  418,  418,  418,
      418,  418,  418,  418,  419,  419,  419,  419,  419,  419,
      419,  419,  420,  420,  420,  420,  420,  420,  420,  420,
      421,  421,  421,  421,  421,  421,  421,  421,  422,  422,
      422,  422,  422,  422,  422,  422,  423,  423,  423,  423,
      423,  423,  423,  423,  424,  424,  424,  424,  424,  424,
      424,  424,  425,  425,  425,  425,  425,  425,  425,  425,
      426,  426,  426,  426,  426,  426,  426,  426,  427,  427,

      427,  427,  427,  427,  427,  427,  428,  428,  428,  428,
      428,  428,  428,  428,  429,  429,  429,  429,  429,  429,
      429,  429,  430,  430,  430,  430,  430,  430,  430,  430,
      431,  431,  431,  431,  431,  431,  431,  431,  432,  432,
      432,  432,  432,  432,  432,  432,  433,  433,  433,  433,
      433,  433,  433,  433,  434,  434,  434,  434,  434,  434,
      434,  434,  435,  435,  435,  435,  435,  435,  435,  435,
      436,  436,  436,  436,  436,  436,  436,  436,  437,  437,
      437,  437,  437,  437,  437,  437,  438,  438,  438,  438,
      438,  438,  438,  438,  439,  439,  439,  439,  439,  439,

      439,  439,  440,  440,  440,  440,  440,  440,  440,  440,
      441,  441,  441,  441,  441,  441,  441,  441,  442,  442,
      442,  442,  442,  442,  442,  442,  443,  443,  443,  443,
      443,  443,  443,  443,  444,  444,  444,  444,  444,  444,
      444,  444,  445,  445,  445,  445,  445,  445,  445,  445,
      446,  446,  446,  446,  446,  446,  446,  446,  447,  447,
      447,  447,  447,  447,  447,  447,  448,  448,  448,  448,
      448,  448,  448,  448,  449,  449,  449,  449,  449,  449,
      449,  449,  450,  450,  450,  450,  450,  450,  450,  450,
      451,  451,  451,  451,  451,  451,  451,  451,  452,  452,

      452,  452,  452,  452,  452,  452,  453,  453,  453,  453,
      453,  453,  453,  453,  454,  454,  454,  454,  454,  454,
      454,  454,  455,  455,  455,  455,  455,  455,  455,  455,
      456,  456,  456,  456,  456,  456,  456,  456,  457,  457,
      457,  457,  457,  457,  457,  457,  458,  458,  458,  458,
      458,  458,  458,  458,  459,  459,  459,  459,  459,  459,
      459,  459,  460,  460,  460,  460,  460,  460,  460,  460,
      461,  461,  461,  461,  461,  461,  461,  461,  462,  462,
      462,  462,  462,  462,  462,  462,  463,  463,  463,  463,
      463,  463,  463,  463,  464,  464,  464,  464,  464,  464,

      464,  464,  465,  465,  465,  465,  465,  465,  465,  465,
      466,  466,  466,  466,  466,  466,  466,  466,  467,  467,
      467,  467,  467,  467,  467,  467,  468,  468,  468,  468,
      468,  468,  468,  468,  469,  469,  469,  469,  469,  469,
      469,  469,  470,  470,  470,  470,  470,  470,  470,  470,
      471,  302,  471,  471,  471,  471,  471,  471,  472,  472,
      472,  472,  472,  472,  472,  472,  473,  299,  473,  473,
      473,  473,  473,  473,  474,  474,  474,  474,  474,  474,
      474,  474,  475,  297,  475,  475,  475,  475,  475,  475,
      476,  476,  476,  476,  476,  476,  476,  476,  477,  296,

      477,  477,  477,  477,  477,  477,  478,  478,  478,  478,
      478,  478,  478,  478,  479,  293,  479,  479,  479,  479,
      479,  479,  480,  480,  480,  480,  480,  480,  480,  480,
      481,  290,  481,  481,  481,  481,  481,  481,  482,  482,
      482,  482,  482,  482,  482,  482,  483,  483,  286,  483,
      483,  483,  483,  483,  484,  484,  484,  484,  484,  484,
      484,  484,  485,  485,  283,  485,  485,  485,  485,  485,
      486,  486,  486,  486,  486,  486,  486,  486,  487,  487,
      280,  487,  487,  487,  487,  487,  488,  488,  488,  488,
      488,  488,  488,  488,  489,  489,  278,  489,  489,  489,

      489,  489,  490,  490,  490,  490,  490,  490,  490,  490,
      491,  491,  275,  491,  491,  491,  491,  491,  492,  492,
      492,  492,  492,  492,  492,  492,  493,  493,  272,  493,
      493,  493,  493,  493,  494,  494,  494,  494,  494,  494,
      494,  494,  495,  495,  495,  495,  268,  495,  495,  495,
      496,  496,  496,  496,  496,  496,  496,  496,  497,  497,
      497,  497,  265,  497,  497,  497,  498,  498,  498,  498,
      498,  498,  498,  498,  499,  499,  499,  499,  262,  499,
      499,  499,  500,  500,  500,  500,  500,  500,  500,  500,
      501,  501,  501,  501,  260,  501,  501,  501,  502,  502,

      502,  502,  502,  502,  502,  502,  503,  503,  503,  503,
      257,  503,  503,  503,  504,  504,  504,  504,  504,  504,
      504,  504,  505,  505,  505,  505,  254,  505,  505,  505,
      506,  506,  506,  506,  506,  506,  506,  506,  507,  507,
      507,  507,  507,  250,  507,  507,  508,  508,  508,  508,
      508,  508,  508,  508,  509,  509,  509,  509,  509,  247,
      509,  509,  510,  510,  510,  510,  510,  510,  510,  510,
      511,  511,  511,  511,  511,  244,  511,  511,  512,  512,
      512,  512,  512,  512,  512,  512,  513,  513,  513,  513,
      513,  242,  513,  513,  514,  514,  514,  514,  514,  514,

      514,  514,  515,  515,  515,  515,  515,  239,  515,  515,
      516,  516,  516,  516,  516,  516,  516,  516,  517,  517,
      517,  517,  517,  236,  517,  517,  518,  518,  518,  518,
      518,  518,  518,  518,  519,  519,  519,  519,  519,  519,
      232,  519,  520,  520,  520,  520,  520,  520,  520,  520,
      521,  521,  521,  521,  521,  521,  229,  521,  522,  522,
      522,  522,  522,  522,  522,  522,  523,  523,  523,  523,
      523,  523,  226,  523,  524,  524,  524,  524,  524,  524,
      524,  524,  525,  525,  525,  525,  525,  525,  224,  525,
      526,  526,  526,  526,  526,  526,  526,  526,  527,  527,

      527,  527,  527,  527,  221,  527,  528,  528,  528,  528,
      528,  528,  528,  528,  529,  529,  529,  529,  529,  529,
      218,  529,  530,  530,  530,  530,  530,  530,  530,  530,
      531,  531,  531,  531,  531,  531,  531,  532,  532,  532,
      532,  532,  532,  532,  532,  533,  533,  533,  533,  533,
      533,  533,  534,  534,  534,  534,  534,  534,  534,  534,
      535,  535,  535,  535,  535,  535,  535,  536,  536,  536,
      536,  536,  536,  536,  536,  537,  537,  537,  537,  537,
      537,  537,  538,  538,  538,  538,  538,  538,  538,  538,
      539,  539,  539,  539,  539,  539,  539,  540,  540,  540,

      540,  540,  540,  540,  540,  541,  541,  541,  541,  541,
      541,  541,  542,  542,  542,  542,  542,  542,  542,  542,
      214,  211,  208,  205,  203,  201,  197,  195,  193,  192,
      190,  188,  186,  182,  180,  178,  176,  174,  172,  168,
      166,  164,  162,  160,  158,  154,  152,  150,  148,  146,
      144,  140,  138,  136,  134,  132,  130,  126,  124,  122,
      121,  120,  119,  117,  116,  115,  114,  113,  112,  111,
      110,  108,  107,  106,  105,  104,  103,  102,  100,   99,
       98,   97,   96,   95,   94,   92,   91,   90,   89,   88,
       87,   86,   84,   83,   82,   81,   80,   79,   78,   76,

       75,   74,   73,   71,   70,   69,   68,   67,   66,   65,
       63,   62,   60,   59,   58,   57,   56,   55,   54,   53,
       52,   51,   50,   49,   48,   47,   45,   44,   43,   42,
       41,   40,   39,   38,   36,   35,   34,   33,   32,   31,
       30,   29,   28,   27,   26,   25,   24,   23,   21,   19,
       16,   12,    9,    3,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[56] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "./DST_Setting_lexer.l"
#define YY_NO_UNISTD_H 1
#line 7 "./DST_Setting_lexer.l"
#include <iostream>
#include <string>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <Deamer/External/Cpp/Lexer/TerminalObject.h>
#include "DST_Setting/Flex/Lexer.h"

#include "DST_Setting/Ast/Enum/Type.h"

#include "DST_Setting/Ast/Node/LEFT_BRACKETS.h"
#include "DST_Setting/Ast/Node/RIGHT_BRACKETS.h"
#include "DST_Setting/Ast/Node/DOT.h"
#include "DST_Setting/Ast/Node/ADD_ASSIGNMENT.h"
#include "DST_Setting/Ast/Node/EQUAL.h"
#include "DST_Setting/Ast/Node/INVALID.h"
#include "DST_Setting/Ast/Node/LEFT_SQUARE_BRACKET.h"
#include "DST_Setting/Ast/Node/RIGHT_SQUARE_BRACKET.h"
#include "DST_Setting/Ast/Node/USER_INPUT.h"
#include "DST_Setting/Ast/Node/VARNAME.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_1_0.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_1_1.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_1_2.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_1_3.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_1_4.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_1_5.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_0_0.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_0_1.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_0_2.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_0_3.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_0_4.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_0_5.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_1_0.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_1_1.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_1_2.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_1_3.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_1_4.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_1_5.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_2_0.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_2_1.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_2_2.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_2_3.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_2_4.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_2_5.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_3_0.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_3_1.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_3_2.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_3_3.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_3_4.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_3_5.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_4_0.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_4_1.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_4_2.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_4_3.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_4_4.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_4_5.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_5_0.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_5_1.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_5_2.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_5_3.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_5_4.h"
#include "DST_Setting/Ast/Node/ALTERNATE_FIELD_2_5_5.h"
#include "DST_Setting/Ast/Node/OTHER.h"
#include "DST_Setting/Ast/Node/program.h"
#include "DST_Setting/Ast/Node/stmts.h"
#include "DST_Setting/Ast/Node/stmt.h"
#include "DST_Setting/Ast/Node/abstraction.h"
#include "DST_Setting/Ast/Node/special.h"
#include "DST_Setting/Ast/Node/variable_declaration.h"
#include "DST_Setting/Ast/Node/main_assignment.h"
#include "DST_Setting/Ast/Node/keyword_assignment.h"
#include "DST_Setting/Ast/Node/scope.h"
#include "DST_Setting/Ast/Node/dst_keyword.h"
#include "DST_Setting/Ast/Node/user_keyword.h"
#include "DST_Setting/Ast/Node/alternative_field_nt_1.h"
#include "DST_Setting/Ast/Node/alternative_field_nt_2.h"


#include "Bison/DST_Setting_parser.tab.h"
void showError();
extern int DST_Settinglex();

static bool local_store = false;
static bool include_deleted = false;
static int column = 0;
static void handleColumn(const std::string& text);
static void store(const deamer::external::cpp::lexer::TerminalObject* const newObject);
static std::vector<const deamer::external::cpp::lexer::TerminalObject*> 
local_objects;


#ifndef yyval
#define yyval yytext
#endif // yyval
#line 1395 "lex.DST_Setting.c"
#line 1396 "lex.DST_Setting.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 159 "./DST_Setting_lexer.l"


#line 1616 "lex.DST_Setting.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 357 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 356 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 161 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(1))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(1))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(1)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(1)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (LEFT_BRACKETS); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 162 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(2))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(2))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(2)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(2)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (RIGHT_BRACKETS); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 163 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(3))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(3))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(3)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(3)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (DOT); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 164 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(4))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(4))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(4)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(4)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ADD_ASSIGNMENT); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 165 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(5))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(5))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(5)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(5)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (EQUAL); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 166 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(6))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(6))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(6)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(6)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (INVALID); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 167 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(7))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(7))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(7)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(7)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (LEFT_SQUARE_BRACKET); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 168 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(8))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(8))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(8)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(8)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (RIGHT_SQUARE_BRACKET); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 169 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(9))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(9))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(9)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(9)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (USER_INPUT); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 170 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(10))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(10))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(10)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(10)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (VARNAME); }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 171 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(11))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(11))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(11)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(11)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_1_0); }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 172 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(12))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(12))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(12)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(12)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_1_1); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 173 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(13))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(13))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(13)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(13)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_1_2); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 174 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(14))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(14))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(14)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(14)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_1_3); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 175 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(15))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(15))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(15)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(15)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_1_4); }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 176 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(16))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(16))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(16)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(16)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_1_5); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 177 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(17))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(17))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(17)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(17)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_0_0); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 178 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(18))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(18))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(18)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(18)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_0_1); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 179 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(19))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(19))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(19)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(19)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_0_2); }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 180 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(20))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(20))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(20)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(20)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_0_3); }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 181 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(21))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(21))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(21)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(21)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_0_4); }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 182 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(22))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(22))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(22)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(22)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_0_5); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 183 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(23))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(23))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(23)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(23)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_1_0); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 184 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(24))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(24))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(24)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(24)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_1_1); }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 185 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(25))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(25))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(25)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(25)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_1_2); }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 186 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(26))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(26))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(26)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(26)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_1_3); }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 187 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(27))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(27))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(27)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(27)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_1_4); }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 188 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(28))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(28))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(28)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(28)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_1_5); }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 189 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(29))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(29))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(29)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(29)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_2_0); }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 190 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(30))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(30))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(30)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(30)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_2_1); }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 191 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(31))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(31))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(31)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(31)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_2_2); }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 192 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(32))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(32))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(32)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(32)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_2_3); }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 193 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(33))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(33))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(33)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(33)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_2_4); }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 194 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(34))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(34))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(34)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(34)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_2_5); }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 195 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(35))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(35))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(35)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(35)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_3_0); }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 196 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(36))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(36))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(36)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(36)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_3_1); }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 197 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(37))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(37))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(37)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(37)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_3_2); }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 198 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(38))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(38))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(38)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(38)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_3_3); }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 199 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(39))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(39))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(39)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(39)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_3_4); }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 200 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(40))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(40))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(40)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(40)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_3_5); }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 201 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(41))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(41))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(41)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(41)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_4_0); }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 202 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(42))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(42))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(42)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(42)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_4_1); }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 203 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(43))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(43))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(43)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(43)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_4_2); }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 204 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(44))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(44))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(44)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(44)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_4_3); }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 205 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(45))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(45))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(45)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(45)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_4_4); }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 206 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(46))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(46))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(46)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(46)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_4_5); }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 207 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(47))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(47))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(47)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(47)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_5_0); }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 208 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(48))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(48))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(48)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(48)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_5_1); }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 209 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(49))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(49))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(49)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(49)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_5_2); }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 210 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(50))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(50))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(50)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(50)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_5_3); }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 211 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(51))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(51))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(51)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(51)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_5_4); }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 212 "./DST_Setting_lexer.l"
{  if (local_store && !false || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(52))); else if (local_store && true) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(52))); else if (local_store && false); else if (!false || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(52)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(52)); handleColumn(yyval); if ((!local_store && true) || (!local_store && include_deleted)) return (ALTERNATE_FIELD_2_5_5); }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 213 "./DST_Setting_lexer.l"
{  if (local_store && !true || local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(53))); else if (local_store && false) store(new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(53))); else if (local_store && true); else if (!true || include_deleted) DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(53)); else DST_Settinglval.Terminal = new deamer::external::cpp::lexer::TerminalObject("", yylineno, column, std::size_t(53)); handleColumn(yyval); if ((!local_store && false) || (!local_store && include_deleted)) return (OTHER); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 215 "./DST_Setting_lexer.l"
{ if (local_store && include_deleted) store(new deamer::external::cpp::lexer::TerminalObject(yyval, yylineno, column, std::size_t(0))); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 217 "./DST_Setting_lexer.l"
ECHO;
	YY_BREAK
#line 2051 "lex.DST_Setting.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 357 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 357 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 356);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 217 "./DST_Setting_lexer.l"


static void store(const deamer::external::cpp::lexer::TerminalObject* const newObject)
{
	local_objects.push_back(newObject);
}

static void clear()
{
	local_objects.clear();
}

static void handleColumn(const std::string& text)
{
	int& currentColumn = column;
	currentColumn += text.size();
	for (auto character : text)
	{
		if (character == '\n')
		{
			currentColumn = 0;
			break;
		}
	}
}

std::vector<const ::deamer::external::cpp::lexer::TerminalObject*> DST_Setting::flex::lexer::Lexer::Tokenize(const std::string& text, ::deamer::external::cpp::lexer::TerminalConstructionPolicy constructionPolicy) const
{
	if (constructionPolicy == ::deamer::external::cpp::lexer::TerminalConstructionPolicy::include_deleted_terminals)
	{
		include_deleted = true;
	}
	else
	{
		include_deleted = false;
	}

	local_store = true;
	column = 0;

	YY_BUFFER_STATE buf;
	buf = yy_scan_string(text.c_str());
	yylex();
	yy_delete_buffer(buf);
	yylex_destroy();

	local_store = false;
	include_deleted = false;

	auto local_objects_copy = local_objects;
	clear();

	return local_objects_copy;
}
